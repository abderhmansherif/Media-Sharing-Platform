@model BeatBox.ViewModel.ProfileViewModel

@section Styles {
    <style>
        /* أنماط الصفحة الحالية تبقى كما هي */
        .profile-container {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(15px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .profile-sidebar {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 12px;
            padding: 1.5rem;
            height: fit-content;
        }

        .profile-content {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 12px;
            padding: 1.5rem;
        }

        .profile-img {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border: 3px solid var(--accent-color);
            box-shadow: 0 0 20px rgba(253, 121, 168, 0.3);
        }

        .sidebar-link {
            display: block;
            padding: 12px 15px;
            color: var(--light-color);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 8px;
            transition: all 0.3s ease;
        }

        .sidebar-link:hover, .sidebar-link.active {
            background: rgba(253, 121, 168, 0.2);
            color: var(--accent-color);
            transform: translateX(5px);
        }

        .sidebar-link i {
            margin-left: 10px;
            width: 20px;
            text-align: center;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 1rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-5px);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            background: var(--gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .bio-edit {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }

        .bio-textarea {
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 5px;
            padding: 10px;
            width: 100%;
            min-height: 120px;
            resize: vertical;
        }

        .bio-textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(253, 121, 168, 0.2);
        }

        .btn-save {
            background: var(--gradient);
            border: none;
            padding: 8px 20px;
            border-radius: 5px;
            color: white;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(253, 121, 168, 0.4);
        }

        .alert-message {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.5s ease;
            background: rgba(0, 200, 83, 0.9);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .alert-message.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* content sections */
        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        .media-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .tab-btn {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: var(--accent-color);
        }

        .tab-btn:hover {
            background: rgba(253, 121, 168, 0.7);
        }

        .media-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .media-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
        }

        .media-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        }

        .media-thumbnail {
            width: 100%;
            height: 160px;
            object-fit: cover;
        }

        .media-info {
            padding: 15px;
        }

        .media-title {
            font-weight: bold;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .media-type {
            font-size: 0.8rem;
            color: var(--accent-color);
            margin-bottom: 10px;
        }

        .media-date {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .media-controls {
            margin-top: 10px;
        }

        .audio-player {
            width: 100%;
            height: 40px;
            border-radius: 5px;
        }

        .video-player {
            width: 100%;
            border-radius: 5px;
            max-height: 200px;
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 30px;
        }

        .no-items {
            text-align: center;
            padding: 30px;
            color: rgba(255, 255, 255, 0.5);
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .page-btn {
            padding: 8px 15px;
            margin: 0 5px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
        }

        .page-btn.active {
            background: var(--accent-color);
        }

        .media-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .media-item:hover .media-actions {
            opacity: 1;
        }

        .action-btn {
            background: rgba(0, 0, 0, 0.7);
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: var(--accent-color);
            transform: scale(1.1);
        }

        .action-btn.delete {
            background: rgba(220, 53, 69, 0.7);
        }

        .action-btn.delete:hover {
            background: rgba(220, 53, 69, 1);
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .user-info {
            margin-bottom: 20px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }

        .user-info h4 {
            margin-bottom: 10px;
            color: var(--accent-color);
        }

        .user-info p {
            margin-bottom: 5px;
        }
    </style>
}

<div class="profile-container">
    <div class="row">
        <div class="col-md-3">
            <div class="profile-sidebar sticky-top" style="top: 100px;">
                <div class="text-center mb-4">
                    <img src="@(Model.PictureUrl ?? "https://via.placeholder.com/150")" class="profile-img rounded-circle mb-3">
                    <h4>@Model.Username</h4>
                </div>

                <div class="nav flex-column">
                    <a href="#" class="sidebar-link active" data-section="profile-overview">
                        <i class="fas fa-user"></i> Profile Overview
                    </a>
                    <a href="#" class="sidebar-link" data-section="my-media">
                        <i class="fas fa-play-circle"></i> My Media
                    </a>
                    <a href="#" class="sidebar-link" data-section="favorites">
                        <i class="fas fa-heart"></i> Favorites
                    </a>
                    <a href="#" class="sidebar-link" data-section="listening-history">
                        <i class="fas fa-history"></i> History
                    </a>
                    <a  asp-area = "" asp-action="Index" asp-controller="Settings" asp-route-Id = "@Model.Id" class="sidebar-link">
                        <i class="fas fa-cog"></i> Settings
                    </a>
                    <a asp-action="Signout" asp-controller="Account" class="sidebar-link">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </div>

                <div class="mt-4">
                    <h5 class="border-bottom pb-2">Stats</h5>
                    <div class="d-flex justify-content-between mt-3">
                        <div class="stat-card">
                            <div class="stat-number" id="total-medias">0</div>
                            <div class="stat-label">Total Media</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="favorites-count">0</div>
                            <div class="stat-label">Favorites</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="history-count">0</div>
                            <div class="stat-label">History</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Overview -->
        <div class="col-md-9">
            <div id="profile-overview" class="content-section active">
                <div class="profile-content">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3>Profile Overview</h3>
                        <a asp-area="" asp-route-Id = "@Model.Id" asp-action="Index" asp-controller="Settings" class="btn btn-primary">
                            <i class="fas fa-edit me-2"></i>Edit Profile
                        </a>
                    </div>

                    <div class="mb-4">
                        <h5 class="text-accent">Personal Information</h5>
                        <div class="mt-3">
                            <p><strong>Username:</strong> @Model.Username</p>
                            <p><strong>Email:</strong> @Model.Email</p>
                            <p><strong>Bio:</strong> <span id="bio-text">@(string.IsNullOrEmpty(Model.Bio) ? "No bio yet..." : Model.Bio)</span></p>
                        </div>

                        <form id="bio-form" asp-action="Index" asp-controller="Profile">
                            @Html.AntiForgeryToken()
                            <div class="bio-edit">
                                <h6>Edit Your Bio</h6>
                                <textarea class="bio-textarea" id="bio-textarea" name="bio">@Model.Bio</textarea>
                                <input type="hidden" name="userId" value="@Model.Id">
                                <div class="d-flex justify-content-end mt-3">
                                    <button type="button" class="btn-save" id="save-bio-btn">
                                        <i class="fas fa-save me-2"></i>Save Bio
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- My Media Section -->
            <div id="my-media" class="content-section">
                <div class="profile-content">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3>My Media</h3>
                    </div>

                    <div class="media-tabs">
                        <button class="tab-btn active" data-type="all">All Media</button>
                        <button class="tab-btn" data-type="Audio">Audios</button>
                        <button class="tab-btn" data-type="Video">Videos</button>
                    </div>

                    <div class="loading-spinner" id="my-media-loading">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p>Loading media...</p>
                    </div>

                    <div class="no-items" id="no-my-media" style="display: none;">
                        <i class="fas fa-play-circle fa-2x mb-3"></i>
                        <p>No media found</p>
                    </div>

                    <div class="media-grid" id="my-media-grid"></div>

                    <div class="pagination" id="my-media-pagination" style="display: none;">
                        <!-- سيتم إنشاء أزرار الترقيم ديناميكياً -->
                    </div>
                </div>
            </div>

            <!-- Favorites -->
            <div id="favorites" class="content-section">
                <div class="profile-content">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3>Your Favorites</h3>
                    </div>

                    <div class="favorites-tabs">
                        <button class="tab-btn active" data-type="Audio">Audios</button>
                        <button class="tab-btn" data-type="Video">Videos</button>
                    </div>

                    <div class="loading-spinner" id="favorites-loading">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p>Loading your favorites...</p>
                    </div>

                    <div class="no-items" id="no-favorites" style="display: none;">
                        <i class="fas fa-heart fa-2x mb-3"></i>
                        <p>No favorites found</p>
                    </div>

                    <div class="media-grid" id="favorites-grid"></div>
                </div>
            </div>

            <!-- Listening History -->
            <div id="listening-history" class="content-section">
                <div class="profile-content">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3>Listening & Watching History</h3>
                    </div>

                    <div class="history-tabs">
                        <button class="tab-btn active" data-type="all">All</button>
                        <button class="tab-btn" data-type="Audio">Audios</button>
                        <button class="tab-btn" data-type="Video">Videos</button>
                    </div>

                    <div class="loading-spinner" id="history-loading">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p>Loading your history...</p>
                    </div>

                    <div class="no-items" id="no-history" style="display: none;">
                        <i class="fas fa-history fa-2x mb-3"></i>
                        <p>No history found</p>
                    </div>

                    <div class="media-grid" id="history-grid"></div>

                    <div class="pagination" id="history-pagination">
                        <button class="page-btn" data-page="1">1</button>
                        <button class="page-btn" data-page="2">2</button>
                        <button class="page-btn" data-page="3">3</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="alert-message" id="success-alert" style="display: none;">
    <i class="fas fa-check-circle me-2"></i> Changes saved successfully
</div>

@section Scripts {
<script>
    // Global variables
    let currentUserId = '@Model.Id';
    let currentMediaPage = 1;
    let currentHistoryPage = 1;
    const pageSize = 9;

    // Save bio
    document.getElementById('save-bio-btn').addEventListener('click', function () {
        const newBio = document.getElementById('bio-textarea').value;
        
        // إرسال البيانات إلى السيرفر
        const formData = new FormData();
        formData.append('userId', currentUserId);
        formData.append('bio', newBio);
        
        // إضافة AntiForgeryToken للحماية
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        fetch('/Profile/Index', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': token
            },
            body: formData
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            } else {
                document.getElementById('bio-text').textContent = newBio || "No bio yet...";
                
                const alert = document.getElementById('success-alert');
                alert.style.display = 'block';
                setTimeout(() => { alert.classList.add('show'); }, 100);
                setTimeout(() => {
                    alert.classList.remove('show');
                    setTimeout(() => { alert.style.display = 'none'; }, 500);
                }, 3000);
            }
        })
        .catch(error => {
            console.error('Error saving bio:', error);
            alert('Error saving bio. Please try again.');
        });
    });

    // Navigation between sections
    document.querySelectorAll('.sidebar-link').forEach(link => {
        link.addEventListener('click', function (e) {
            if (this.getAttribute('data-section')) {
                e.preventDefault();
                document.querySelectorAll('.sidebar-link').forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
                const sectionId = this.getAttribute('data-section');
                if (sectionId) {
                    document.getElementById(sectionId).classList.add('active');
                    
                    // Load appropriate content based on section
                    if (sectionId === 'my-media') loadMyMedia('all', 1);
                    if (sectionId === 'favorites') loadFavorites('Audio');
                    if (sectionId === 'listening-history') loadHistory('all', 1);
                }
            }
        });
    });

    // Switch between media tabs in My Media section
    document.querySelectorAll('#my-media .media-tabs .tab-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            document.querySelectorAll('#my-media .media-tabs .tab-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            const mediaType = this.getAttribute('data-type');
            loadMyMedia(mediaType, 1);
        });
    });

    // Switch between favorites tabs
    document.querySelectorAll('.favorites-tabs .tab-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            document.querySelectorAll('.favorites-tabs .tab-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            const mediaType = this.getAttribute('data-type');
            loadFavorites(mediaType);
        });
    });

    // Switch between history tabs
    document.querySelectorAll('.history-tabs .tab-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            document.querySelectorAll('.history-tabs .tab-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            const mediaType = this.getAttribute('data-type');
            loadHistory(mediaType, 1);
        });
    });

    // Pagination buttons (event delegation)
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('page-btn')) {
            document.querySelectorAll('.page-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            const page = parseInt(e.target.getAttribute('data-page'));
            
            // تحديد أي قسم نشط حالياً
            const activeSection = document.querySelector('.content-section.active').id;
            
            if (activeSection === 'my-media') {
                const currentType = document.querySelector('#my-media .media-tabs .tab-btn.active').getAttribute('data-type');
                loadMyMedia(currentType, page);
            } else if (activeSection === 'listening-history') {
                const currentType = document.querySelector('.history-tabs .tab-btn.active').getAttribute('data-type');
                loadHistory(currentType, page);
            }
        }
    });

    // Load My Media with pagination
    function loadMyMedia(type, page) {
        const grid = document.getElementById('my-media-grid');
        const loading = document.getElementById('my-media-loading');
        const noItems = document.getElementById('no-my-media');
        const pagination = document.getElementById('my-media-pagination');

        loading.style.display = 'block';
        grid.innerHTML = '';
        noItems.style.display = 'none';
        currentMediaPage = page;

        fetch(`/Profile/GetUserMedias?Id=${currentUserId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                loading.style.display = 'none';
                
                // Filter data by type if needed
                let filteredData = data;
                if (type !== 'all') {
                    filteredData = data.filter(item => item.mediaType === type);
                }

                if (!filteredData || filteredData.length === 0) {
                    noItems.style.display = 'block';
                    pagination.style.display = 'none';
                    return;
                }

                // Apply pagination
                const startIndex = (page - 1) * pageSize;
                const endIndex = startIndex + pageSize;
                const paginatedData = filteredData.slice(startIndex, endIndex);

                // Render media items
                paginatedData.forEach(item => {
                    const mediaItem = createMediaItem(item, true); // true means show delete button
                    grid.appendChild(mediaItem);
                });

                // Update pagination
                updatePagination(pagination, filteredData.length, page, 'my-media');
            })
            .catch(error => {
                console.error('Error loading my media:', error);
                loading.style.display = 'none';
                noItems.style.display = 'block';
                noItems.innerHTML = `<i class="fas fa-exclamation-triangle fa-2x mb-3"></i><p>Error loading media.</p>`;
                pagination.style.display = 'none';
            });
    }

    // Load favorites
    function loadFavorites(type) {
        const grid = document.getElementById('favorites-grid');
        const loading = document.getElementById('favorites-loading');
        const noItems = document.getElementById('no-favorites');

        loading.style.display = 'block';
        grid.innerHTML = '';
        noItems.style.display = 'none';

        // استخدام الـ endpoints الصحيحة من الـ Controller
        const endpoint = type === 'Audio' 
            ? '/Profile/GetUserFavoriteAudios' 
            : '/Profile/GetUserFavoriteVideos';

        fetch(endpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                loading.style.display = 'none';
                
                if (!data || data.length === 0) {
                    noItems.style.display = 'block';
                    return;
                }

                data.forEach(item => {
                    const mediaItem = createMediaItem(item, false); // false means don't show delete button for favorites
                    grid.appendChild(mediaItem);
                });
            })
            .catch(error => {
                console.error('Error loading favorites:', error);
                loading.style.display = 'none';
                noItems.style.display = 'block';
                noItems.innerHTML = `<i class="fas fa-exclamation-triangle fa-2x mb-3"></i><p>Error loading favorites.</p>`;
            });
    }

    // Load history
    function loadHistory(type, page) {
        const grid = document.getElementById('history-grid');
        const loading = document.getElementById('history-loading');
        const noItems = document.getElementById('no-history');
        const pagination = document.getElementById('history-pagination');

        loading.style.display = 'block';
        grid.innerHTML = '';
        noItems.style.display = 'none';
        currentHistoryPage = page;

        // بناء الـ URL مع المعاملات
        const endpoint = `/Profile/ListeningHistory?page=${page}&pageSize=${pageSize}`;

        fetch(endpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                loading.style.display = 'none';
                
                // تصفية البيانات حسب النوع إذا لزم الأمر
                let filteredData = data;
                if (type !== 'all') {
                    filteredData = data.filter(item => item.type === type);
                }

                if (!filteredData || filteredData.length === 0) {
                    noItems.style.display = 'block';
                    return;
                }

                filteredData.forEach(item => {
                    const mediaItem = createMediaItem(item, false); // false means don't show delete button for history
                    grid.appendChild(mediaItem);
                });

                // إظهار الترقيم إذا كان لدينا عناصر كافية
                if (filteredData.length >= pageSize) {
                    pagination.style.display = 'flex';
                } else {
                    pagination.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error loading history:', error);
                loading.style.display = 'none';
                noItems.style.display = 'block';
                noItems.innerHTML = `<i class="fas fa-exclamation-triangle fa-2x mb-3"></i><p>Error loading history.</p>`;
            });
    }

    // Helper function to create a media item
    // Helper function to create a media item
        function createMediaItem(item, showDeleteButton) {
            const mediaItem = document.createElement('div');
            mediaItem.className = 'media-item';
            mediaItem.setAttribute('data-media-id', item.id || item.mediaId);
            
            const isAudio = item.mediaType === 'Audio' || item.type === 'Audio';
            const isVideo = item.mediaType === 'Video' || item.type === 'Video';
            
            // استخدام imageurl بدل thumbnailUrl كما في الـ API
            const thumbnailUrl = item.imageurl || item.thumbnailUrl || (isAudio ? 'https://via.placeholder.com/300?text=Audio' : 'https://via.placeholder.com/300?text=Video');
            
            // إعداد الأزرار بناءً على showDeleteButton
            const deleteButton = showDeleteButton ? 
                `<button class="action-btn delete" title="Delete">
                    <i class="fas fa-trash"></i>
                </button>` : '';
            
            mediaItem.innerHTML = `
                <img src="${thumbnailUrl}" class="media-thumbnail">
                <div class="media-actions">
                    <button class="action-btn" title="Play">
                        <i class="fas fa-play"></i>
                    </button>
                    <button class="action-btn" title="Download">
                        <i class="fas fa-download"></i>
                    </button>
                    ${deleteButton}
                </div>
                <div class="media-info">
                    <div class="media-title">${item.title || 'Untitled'}</div>
                    <div class="media-type">${isAudio ? 'Audio' : 'Video'}</div>
                    <div class="media-date">${new Date(item.addedAt || item.uploadedAt).toLocaleDateString()}</div>
                    <div class="media-controls">
                        ${isAudio ? 
                            `<audio controls class="audio-player">
                                <source src="${item.url}" type="audio/mpeg">
                                Your browser does not support the audio element.
                            </audio>` : 
                            `<video controls class="video-player" preload="metadata">
                                <source src="${item.url}" type="video/mp4">
                                Your browser does not support the video element.
                            </video>`
                        }
                    </div>
                </div>`;
            
            // Add event listeners for action buttons
            const playBtn = mediaItem.querySelector('.media-actions button[title="Play"]');
            const downloadBtn = mediaItem.querySelector('.media-actions button[title="Download"]');
            
            playBtn.addEventListener('click', function() {
                const mediaElement = isAudio ? 
                    mediaItem.querySelector('audio') : 
                    mediaItem.querySelector('video');
                
                if (mediaElement.paused) {
                    mediaElement.play();
                    playBtn.innerHTML = '<i class="fas fa-pause"></i>';
                } else {
                    mediaElement.pause();
                    playBtn.innerHTML = '<i class="fas fa-play"></i>';
                }
            });
            
            downloadBtn.addEventListener('click', function() {
                // Create a temporary link to trigger download
                const a = document.createElement('a');
                a.href = item.url;
                a.download = item.title || (isAudio ? 'audio' : 'video');
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            });
            
            // Add delete button functionality if shown
            if (showDeleteButton) {
                const deleteBtn = mediaItem.querySelector('.media-actions button[title="Delete"]');
                deleteBtn.addEventListener('click', function() {
                    if (confirm('Are you sure you want to delete this media?')) {
                        deleteMedia(item.id || item.mediaId, mediaItem);
                    }
                });
            }
            
            return mediaItem;
        }


        function deleteMedia(mediaId, element) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            fetch(`/Profile/DeleteMedia?mediaId=${mediaId}`, {
                method: 'DELETE',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // إزالة العنصر من الصفحة
                    element.remove();
                    
                    // إظهار رسالة النجاح
                    const alert = document.getElementById('success-alert');
                    alert.innerHTML = `<i class="fas fa-check-circle me-2"></i> Media deleted successfully`;
                    alert.style.display = 'block';
                    setTimeout(() => { alert.classList.add('show'); }, 100);
                    setTimeout(() => {
                        alert.classList.remove('show');
                        setTimeout(() => { alert.style.display = 'none'; }, 500);
                    }, 3000);
                    
                    // تحديث الإحصائيات
                    loadStatistics();
                } else {
                    alert('Failed to delete media.');
                }
            })
            .catch(error => {
                console.error("Error deleting media:", error);
                alert('Error deleting media. Please try again.');
            });
        }

   
    // Helper function to update pagination
    function updatePagination(paginationElement, totalItems, currentPage, section) {
        const totalPages = Math.ceil(totalItems / pageSize);
        
        if (totalPages <= 1) {
            paginationElement.style.display = 'none';
            return;
        }
        
        paginationElement.style.display = 'flex';
        paginationElement.innerHTML = '';
        
        for (let i = 1; i <= totalPages; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `page-btn ${i === currentPage ? 'active' : ''}`;
            pageBtn.textContent = i;
            pageBtn.setAttribute('data-page', i);
            paginationElement.appendChild(pageBtn);
        }
    }

    // Load statistics
    function loadStatistics() {
        // Load total media count
        fetch(`/Profile/GetUserMedias?Id=${currentUserId}`)
            .then(response => response.json())
            .then(data => {
                const totalMedias = data.length;
                const audioCount = data.filter(item => item.mediaType === 'Audio').length;
                const videoCount = data.filter(item => item.mediaType === 'Video').length;
                
                document.getElementById('total-medias').textContent = totalMedias;
            })
            .catch(error => {
                console.error('Error loading media statistics:', error);
            });

        // Load favorites count
        fetch('/Profile/GetUserFavoritesCount')
            .then(response => response.json())
            .then(count => {
                document.getElementById('favorites-count').textContent = count;
            })
            .catch(error => {
                console.error('Error loading favorites count:', error);
            });

        // Load history count
        fetch('/Profile/GetListeningHistoryCount')
            .then(response => response.json())
            .then(count => {
                document.getElementById('history-count').textContent = count;
            })
            .catch(error => {
                console.error('Error loading history count:', error);
            });
    }

    // Initial load
    document.addEventListener('DOMContentLoaded', function() {
        // تحميل الإحصائيات
        loadStatistics();
        
        // تحميل المحتوى الأولي
        loadMyMedia('all', 1);
    });
</script>
}