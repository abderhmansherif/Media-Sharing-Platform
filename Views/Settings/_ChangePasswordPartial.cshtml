@model ChangePasswordViewModel

@{ Layout = null; }



<div class="security-card">
    <div class="card-header">
        <div class="header-content">
            <i class="fas fa-lock me-2"></i>
            <div>
                <h5 class="mb-1 text-accent">Change Password</h5>
                <p class="mb-0">Update your account password</p>
            </div>
        </div>
    </div>

    <div class="card-body">
        <form id="change-password-form" method="post" asp-action="ChangePassword" asp-controller="Settings">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="UserId" />

            <div class="form-group">
                <label asp-for="CurrentPassword" class="form-label">
                    <i class="fas fa-key me-2"></i>Current Password
                </label>
                <div class="input-with-icon">
                    <i class="fas fa-key"></i>
                    <input asp-for="CurrentPassword" type="password" class="form-control" 
                           placeholder="Enter your current password" />
                </div>
                <span asp-validation-for="CurrentPassword" class="text-danger validation-message"></span>
            </div>

            <div class="form-group">
                <label asp-for="NewPassword" class="form-label">
                    <i class="fas fa-lock me-2"></i>New Password
                </label>
                <div class="input-with-icon">
                    <i class="fas fa-lock"></i>
                    <input asp-for="NewPassword" type="password" class="form-control" 
                           placeholder="Enter new password" />
                </div>
                <span asp-validation-for="NewPassword" class="text-danger validation-message"></span>
            </div>

            <div class="form-group">
                <label asp-for="ConfirmPassword" class="form-label">
                    <i class="fas fa-lock me-2"></i>Confirm New Password
                </label>
                <div class="input-with-icon">
                    <i class="fas fa-lock"></i>
                    <input asp-for="ConfirmPassword" type="password" class="form-control" 
                           placeholder="Confirm new password" />
                </div>
                <span asp-validation-for="ConfirmPassword" class="text-danger validation-message"></span>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-2"></i>Update Password
                </button>
            </div>
        </form>

        <div id="password-message" class="message-area"></div>
    </div>
</div>

<style>
.security-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    overflow: hidden;
}

.card-header {
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.header-content {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.header-content i {
    font-size: 1.5rem;
    color: var(--accent-color);
    margin-top: 0.25rem;
}

.card-body {
    padding: 1.5rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--light-color);
}

.input-with-icon {
    position: relative;
}

.input-with-icon i {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: rgba(255, 255, 255, 0.6);
}

.input-with-icon .form-control {
    padding-left: 40px;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    transition: all 0.3s ease;
    color: white;
}

.form-control:focus {
    background: rgba(255, 255, 255, 0.1);
    border-color: var(--accent-color);
    box-shadow: 0 0 0 2px rgba(253, 121, 168, 0.2);
    outline: none;
    color: white;
}

.form-control::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.validation-message {
    display: block;
    margin-top: 0.25rem;
    font-size: 0.875rem;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 2rem;
}

.message-area {
    padding: 0.75rem;
    border-radius: 6px;
    text-align: center;
    font-weight: 500;
    margin-top: 1rem;
}

.message-area.success {
    background: rgba(46, 213, 115, 0.1);
    color: #2ed573;
    border: 1px solid rgba(46, 213, 115, 0.2);
}

.message-area.error {
    background: rgba(255, 71, 87, 0.1);
    color: #ff4757;
    border: 1px solid rgba(255, 71, 87, 0.2);
}

.btn-loading {
    position: relative;
    color: transparent !important;
}

.btn-loading::after {
    content: "";
    position: absolute;
    width: 20px;
    height: 20px;
    top: 50%;
    left: 50%;
    margin-left: -10px;
    margin-top: -10px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s ease-in-out infinite;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

@@media (max-width: 576px) {
    .form-actions {
        flex-direction: column;
    }
    
    .btn {
        width: 100%;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('change-password-form');
    
    if (form) {
        form.addEventListener('submit', handlePasswordChange);
    }

    function handlePasswordChange(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        
        setButtonLoading(submitBtn, true);
        document.getElementById('password-message').textContent = '';
        
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message, 'success', 'password-message');
                if (window.showSuccessMessage) {
                    window.showSuccessMessage(data.message);
                }
                form.reset();
            } else {
                const errors = data.errors ? Object.values(data.errors).flat().join(', ') : '';
                showMessage((data.message || 'Error changing password') + (errors ? `: ${errors}` : ''), 'error', 'password-message');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showMessage('An error occurred while changing password', 'error', 'password-message');
        })
        .finally(() => {
            setButtonLoading(submitBtn, false);
        });
    }

    function setButtonLoading(button, isLoading) {
        if (isLoading) {
            button.classList.add('btn-loading');
            button.disabled = true;
        } else {
            button.classList.remove('btn-loading');
            button.disabled = false;
        }
    }

    function showMessage(message, type, elementId) {
        const messageElement = document.getElementById(elementId);
        messageElement.textContent = message;
        messageElement.className = `message-area ${type}`;
        
        if (type === 'success') {
            setTimeout(() => {
                messageElement.textContent = '';
                messageElement.className = 'message-area';
            }, 5000);
        }
    }
});
</script>